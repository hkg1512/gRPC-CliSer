// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: SxDataTransfer.proto
// Original file comments:
//  200GOOD  
//
#ifndef GRPC_SxDataTransfer_2eproto__INCLUDED
#define GRPC_SxDataTransfer_2eproto__INCLUDED

#include "SxDataTransfer.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class RpcService;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace TSDStreaming {

class DataTransfer final {
 public:
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status MbSentDataToTsd(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::TSDStreaming::MbDatRecvResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TSDStreaming::MbDatRecvResponse>> AsyncMbSentDataToTsd(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::TSDStreaming::MbDatRecvResponse>>(AsyncMbSentDataToTsdRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::TSDStreaming::MbDatRecvResponse>* AsyncMbSentDataToTsdRaw(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status MbSentDataToTsd(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::TSDStreaming::MbDatRecvResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TSDStreaming::MbDatRecvResponse>> AsyncMbSentDataToTsd(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::TSDStreaming::MbDatRecvResponse>>(AsyncMbSentDataToTsdRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::TSDStreaming::MbDatRecvResponse>* AsyncMbSentDataToTsdRaw(::grpc::ClientContext* context, const ::TSDStreaming::MbDataTransfer& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::RpcMethod rpcmethod_MbSentDataToTsd_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status MbSentDataToTsd(::grpc::ServerContext* context, const ::TSDStreaming::MbDataTransfer* request, ::TSDStreaming::MbDatRecvResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_MbSentDataToTsd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_MbSentDataToTsd() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_MbSentDataToTsd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MbSentDataToTsd(::grpc::ServerContext* context, const ::TSDStreaming::MbDataTransfer* request, ::TSDStreaming::MbDatRecvResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMbSentDataToTsd(::grpc::ServerContext* context, ::TSDStreaming::MbDataTransfer* request, ::grpc::ServerAsyncResponseWriter< ::TSDStreaming::MbDatRecvResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_MbSentDataToTsd<Service > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_MbSentDataToTsd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_MbSentDataToTsd() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_MbSentDataToTsd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MbSentDataToTsd(::grpc::ServerContext* context, const ::TSDStreaming::MbDataTransfer* request, ::TSDStreaming::MbDatRecvResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MbSentDataToTsd : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_MbSentDataToTsd() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::StreamedUnaryHandler< ::TSDStreaming::MbDataTransfer, ::TSDStreaming::MbDatRecvResponse>(std::bind(&WithStreamedUnaryMethod_MbSentDataToTsd<BaseClass>::StreamedMbSentDataToTsd, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_MbSentDataToTsd() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MbSentDataToTsd(::grpc::ServerContext* context, const ::TSDStreaming::MbDataTransfer* request, ::TSDStreaming::MbDatRecvResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMbSentDataToTsd(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::TSDStreaming::MbDataTransfer,::TSDStreaming::MbDatRecvResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_MbSentDataToTsd<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_MbSentDataToTsd<Service > StreamedService;
};

}  // namespace TSDStreaming


#endif  // GRPC_SxDataTransfer_2eproto__INCLUDED
