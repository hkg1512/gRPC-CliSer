// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SxDataTransfer.proto

#ifndef PROTOBUF_SxDataTransfer_2eproto__INCLUDED
#define PROTOBUF_SxDataTransfer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TSDStreaming {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_SxDataTransfer_2eproto();
void protobuf_AssignDesc_SxDataTransfer_2eproto();
void protobuf_ShutdownFile_SxDataTransfer_2eproto();

class MbDatRecvResponse;
class MbDataPacket;
class MbDataTransfer;

// ===================================================================

class MbDataTransfer : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TSDStreaming.MbDataTransfer) */ {
 public:
  MbDataTransfer();
  virtual ~MbDataTransfer();

  MbDataTransfer(const MbDataTransfer& from);

  inline MbDataTransfer& operator=(const MbDataTransfer& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MbDataTransfer& default_instance();

  void Swap(MbDataTransfer* other);

  // implements Message ----------------------------------------------

  inline MbDataTransfer* New() const { return New(NULL); }

  MbDataTransfer* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MbDataTransfer& from);
  void MergeFrom(const MbDataTransfer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MbDataTransfer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string batchId = 1;
  void clear_batchid();
  static const int kBatchIdFieldNumber = 1;
  const ::std::string& batchid() const;
  void set_batchid(const ::std::string& value);
  void set_batchid(const char* value);
  void set_batchid(const char* value, size_t size);
  ::std::string* mutable_batchid();
  ::std::string* release_batchid();
  void set_allocated_batchid(::std::string* batchid);

  // repeated .TSDStreaming.MbDataPacket mb_packet = 2;
  int mb_packet_size() const;
  void clear_mb_packet();
  static const int kMbPacketFieldNumber = 2;
  const ::TSDStreaming::MbDataPacket& mb_packet(int index) const;
  ::TSDStreaming::MbDataPacket* mutable_mb_packet(int index);
  ::TSDStreaming::MbDataPacket* add_mb_packet();
  ::google::protobuf::RepeatedPtrField< ::TSDStreaming::MbDataPacket >*
      mutable_mb_packet();
  const ::google::protobuf::RepeatedPtrField< ::TSDStreaming::MbDataPacket >&
      mb_packet() const;

  // @@protoc_insertion_point(class_scope:TSDStreaming.MbDataTransfer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr batchid_;
  ::google::protobuf::RepeatedPtrField< ::TSDStreaming::MbDataPacket > mb_packet_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SxDataTransfer_2eproto();
  friend void protobuf_AssignDesc_SxDataTransfer_2eproto();
  friend void protobuf_ShutdownFile_SxDataTransfer_2eproto();

  void InitAsDefaultInstance();
  static MbDataTransfer* default_instance_;
};
// -------------------------------------------------------------------

class MbDataPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TSDStreaming.MbDataPacket) */ {
 public:
  MbDataPacket();
  virtual ~MbDataPacket();

  MbDataPacket(const MbDataPacket& from);

  inline MbDataPacket& operator=(const MbDataPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MbDataPacket& default_instance();

  void Swap(MbDataPacket* other);

  // implements Message ----------------------------------------------

  inline MbDataPacket* New() const { return New(NULL); }

  MbDataPacket* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MbDataPacket& from);
  void MergeFrom(const MbDataPacket& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MbDataPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mb_asset_id = 1;
  void clear_mb_asset_id();
  static const int kMbAssetIdFieldNumber = 1;
  const ::std::string& mb_asset_id() const;
  void set_mb_asset_id(const ::std::string& value);
  void set_mb_asset_id(const char* value);
  void set_mb_asset_id(const char* value, size_t size);
  ::std::string* mutable_mb_asset_id();
  ::std::string* release_mb_asset_id();
  void set_allocated_mb_asset_id(::std::string* mb_asset_id);

  // optional string mb_unit = 2;
  void clear_mb_unit();
  static const int kMbUnitFieldNumber = 2;
  const ::std::string& mb_unit() const;
  void set_mb_unit(const ::std::string& value);
  void set_mb_unit(const char* value);
  void set_mb_unit(const char* value, size_t size);
  ::std::string* mutable_mb_unit();
  ::std::string* release_mb_unit();
  void set_allocated_mb_unit(::std::string* mb_unit);

  // optional string mb_value = 3;
  void clear_mb_value();
  static const int kMbValueFieldNumber = 3;
  const ::std::string& mb_value() const;
  void set_mb_value(const ::std::string& value);
  void set_mb_value(const char* value);
  void set_mb_value(const char* value, size_t size);
  ::std::string* mutable_mb_value();
  ::std::string* release_mb_value();
  void set_allocated_mb_value(::std::string* mb_value);

  // optional string mb_status = 4;
  void clear_mb_status();
  static const int kMbStatusFieldNumber = 4;
  const ::std::string& mb_status() const;
  void set_mb_status(const ::std::string& value);
  void set_mb_status(const char* value);
  void set_mb_status(const char* value, size_t size);
  ::std::string* mutable_mb_status();
  ::std::string* release_mb_status();
  void set_allocated_mb_status(::std::string* mb_status);

  // optional string mb_time = 5;
  void clear_mb_time();
  static const int kMbTimeFieldNumber = 5;
  const ::std::string& mb_time() const;
  void set_mb_time(const ::std::string& value);
  void set_mb_time(const char* value);
  void set_mb_time(const char* value, size_t size);
  ::std::string* mutable_mb_time();
  ::std::string* release_mb_time();
  void set_allocated_mb_time(::std::string* mb_time);

  // optional string mb_tag_type = 6;
  void clear_mb_tag_type();
  static const int kMbTagTypeFieldNumber = 6;
  const ::std::string& mb_tag_type() const;
  void set_mb_tag_type(const ::std::string& value);
  void set_mb_tag_type(const char* value);
  void set_mb_tag_type(const char* value, size_t size);
  ::std::string* mutable_mb_tag_type();
  ::std::string* release_mb_tag_type();
  void set_allocated_mb_tag_type(::std::string* mb_tag_type);

  // @@protoc_insertion_point(class_scope:TSDStreaming.MbDataPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr mb_asset_id_;
  ::google::protobuf::internal::ArenaStringPtr mb_unit_;
  ::google::protobuf::internal::ArenaStringPtr mb_value_;
  ::google::protobuf::internal::ArenaStringPtr mb_status_;
  ::google::protobuf::internal::ArenaStringPtr mb_time_;
  ::google::protobuf::internal::ArenaStringPtr mb_tag_type_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SxDataTransfer_2eproto();
  friend void protobuf_AssignDesc_SxDataTransfer_2eproto();
  friend void protobuf_ShutdownFile_SxDataTransfer_2eproto();

  void InitAsDefaultInstance();
  static MbDataPacket* default_instance_;
};
// -------------------------------------------------------------------

class MbDatRecvResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TSDStreaming.MbDatRecvResponse) */ {
 public:
  MbDatRecvResponse();
  virtual ~MbDatRecvResponse();

  MbDatRecvResponse(const MbDatRecvResponse& from);

  inline MbDatRecvResponse& operator=(const MbDatRecvResponse& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MbDatRecvResponse& default_instance();

  void Swap(MbDatRecvResponse* other);

  // implements Message ----------------------------------------------

  inline MbDatRecvResponse* New() const { return New(NULL); }

  MbDatRecvResponse* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MbDatRecvResponse& from);
  void MergeFrom(const MbDatRecvResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MbDatRecvResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string mb_error_code = 1;
  void clear_mb_error_code();
  static const int kMbErrorCodeFieldNumber = 1;
  const ::std::string& mb_error_code() const;
  void set_mb_error_code(const ::std::string& value);
  void set_mb_error_code(const char* value);
  void set_mb_error_code(const char* value, size_t size);
  ::std::string* mutable_mb_error_code();
  ::std::string* release_mb_error_code();
  void set_allocated_mb_error_code(::std::string* mb_error_code);

  // optional string mb_batch_id = 2;
  void clear_mb_batch_id();
  static const int kMbBatchIdFieldNumber = 2;
  const ::std::string& mb_batch_id() const;
  void set_mb_batch_id(const ::std::string& value);
  void set_mb_batch_id(const char* value);
  void set_mb_batch_id(const char* value, size_t size);
  ::std::string* mutable_mb_batch_id();
  ::std::string* release_mb_batch_id();
  void set_allocated_mb_batch_id(::std::string* mb_batch_id);

  // @@protoc_insertion_point(class_scope:TSDStreaming.MbDatRecvResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr mb_error_code_;
  ::google::protobuf::internal::ArenaStringPtr mb_batch_id_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_SxDataTransfer_2eproto();
  friend void protobuf_AssignDesc_SxDataTransfer_2eproto();
  friend void protobuf_ShutdownFile_SxDataTransfer_2eproto();

  void InitAsDefaultInstance();
  static MbDatRecvResponse* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MbDataTransfer

// optional string batchId = 1;
inline void MbDataTransfer::clear_batchid() {
  batchid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataTransfer::batchid() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataTransfer.batchId)
  return batchid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataTransfer::set_batchid(const ::std::string& value) {
  
  batchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataTransfer.batchId)
}
inline void MbDataTransfer::set_batchid(const char* value) {
  
  batchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataTransfer.batchId)
}
inline void MbDataTransfer::set_batchid(const char* value, size_t size) {
  
  batchid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataTransfer.batchId)
}
inline ::std::string* MbDataTransfer::mutable_batchid() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataTransfer.batchId)
  return batchid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataTransfer::release_batchid() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataTransfer.batchId)
  
  return batchid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataTransfer::set_allocated_batchid(::std::string* batchid) {
  if (batchid != NULL) {
    
  } else {
    
  }
  batchid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), batchid);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataTransfer.batchId)
}

// repeated .TSDStreaming.MbDataPacket mb_packet = 2;
inline int MbDataTransfer::mb_packet_size() const {
  return mb_packet_.size();
}
inline void MbDataTransfer::clear_mb_packet() {
  mb_packet_.Clear();
}
inline const ::TSDStreaming::MbDataPacket& MbDataTransfer::mb_packet(int index) const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataTransfer.mb_packet)
  return mb_packet_.Get(index);
}
inline ::TSDStreaming::MbDataPacket* MbDataTransfer::mutable_mb_packet(int index) {
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataTransfer.mb_packet)
  return mb_packet_.Mutable(index);
}
inline ::TSDStreaming::MbDataPacket* MbDataTransfer::add_mb_packet() {
  // @@protoc_insertion_point(field_add:TSDStreaming.MbDataTransfer.mb_packet)
  return mb_packet_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TSDStreaming::MbDataPacket >*
MbDataTransfer::mutable_mb_packet() {
  // @@protoc_insertion_point(field_mutable_list:TSDStreaming.MbDataTransfer.mb_packet)
  return &mb_packet_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TSDStreaming::MbDataPacket >&
MbDataTransfer::mb_packet() const {
  // @@protoc_insertion_point(field_list:TSDStreaming.MbDataTransfer.mb_packet)
  return mb_packet_;
}

// -------------------------------------------------------------------

// MbDataPacket

// optional string mb_asset_id = 1;
inline void MbDataPacket::clear_mb_asset_id() {
  mb_asset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_asset_id() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_asset_id)
  return mb_asset_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_asset_id(const ::std::string& value) {
  
  mb_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_asset_id)
}
inline void MbDataPacket::set_mb_asset_id(const char* value) {
  
  mb_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_asset_id)
}
inline void MbDataPacket::set_mb_asset_id(const char* value, size_t size) {
  
  mb_asset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_asset_id)
}
inline ::std::string* MbDataPacket::mutable_mb_asset_id() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_asset_id)
  return mb_asset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_asset_id() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_asset_id)
  
  return mb_asset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_asset_id(::std::string* mb_asset_id) {
  if (mb_asset_id != NULL) {
    
  } else {
    
  }
  mb_asset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_asset_id);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_asset_id)
}

// optional string mb_unit = 2;
inline void MbDataPacket::clear_mb_unit() {
  mb_unit_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_unit() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_unit)
  return mb_unit_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_unit(const ::std::string& value) {
  
  mb_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_unit)
}
inline void MbDataPacket::set_mb_unit(const char* value) {
  
  mb_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_unit)
}
inline void MbDataPacket::set_mb_unit(const char* value, size_t size) {
  
  mb_unit_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_unit)
}
inline ::std::string* MbDataPacket::mutable_mb_unit() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_unit)
  return mb_unit_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_unit() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_unit)
  
  return mb_unit_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_unit(::std::string* mb_unit) {
  if (mb_unit != NULL) {
    
  } else {
    
  }
  mb_unit_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_unit);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_unit)
}

// optional string mb_value = 3;
inline void MbDataPacket::clear_mb_value() {
  mb_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_value() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_value)
  return mb_value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_value(const ::std::string& value) {
  
  mb_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_value)
}
inline void MbDataPacket::set_mb_value(const char* value) {
  
  mb_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_value)
}
inline void MbDataPacket::set_mb_value(const char* value, size_t size) {
  
  mb_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_value)
}
inline ::std::string* MbDataPacket::mutable_mb_value() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_value)
  return mb_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_value() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_value)
  
  return mb_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_value(::std::string* mb_value) {
  if (mb_value != NULL) {
    
  } else {
    
  }
  mb_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_value);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_value)
}

// optional string mb_status = 4;
inline void MbDataPacket::clear_mb_status() {
  mb_status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_status() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_status)
  return mb_status_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_status(const ::std::string& value) {
  
  mb_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_status)
}
inline void MbDataPacket::set_mb_status(const char* value) {
  
  mb_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_status)
}
inline void MbDataPacket::set_mb_status(const char* value, size_t size) {
  
  mb_status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_status)
}
inline ::std::string* MbDataPacket::mutable_mb_status() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_status)
  return mb_status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_status() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_status)
  
  return mb_status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_status(::std::string* mb_status) {
  if (mb_status != NULL) {
    
  } else {
    
  }
  mb_status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_status);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_status)
}

// optional string mb_time = 5;
inline void MbDataPacket::clear_mb_time() {
  mb_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_time() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_time)
  return mb_time_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_time(const ::std::string& value) {
  
  mb_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_time)
}
inline void MbDataPacket::set_mb_time(const char* value) {
  
  mb_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_time)
}
inline void MbDataPacket::set_mb_time(const char* value, size_t size) {
  
  mb_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_time)
}
inline ::std::string* MbDataPacket::mutable_mb_time() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_time)
  return mb_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_time() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_time)
  
  return mb_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_time(::std::string* mb_time) {
  if (mb_time != NULL) {
    
  } else {
    
  }
  mb_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_time);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_time)
}

// optional string mb_tag_type = 6;
inline void MbDataPacket::clear_mb_tag_type() {
  mb_tag_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDataPacket::mb_tag_type() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDataPacket.mb_tag_type)
  return mb_tag_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_mb_tag_type(const ::std::string& value) {
  
  mb_tag_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDataPacket.mb_tag_type)
}
inline void MbDataPacket::set_mb_tag_type(const char* value) {
  
  mb_tag_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDataPacket.mb_tag_type)
}
inline void MbDataPacket::set_mb_tag_type(const char* value, size_t size) {
  
  mb_tag_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDataPacket.mb_tag_type)
}
inline ::std::string* MbDataPacket::mutable_mb_tag_type() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDataPacket.mb_tag_type)
  return mb_tag_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDataPacket::release_mb_tag_type() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDataPacket.mb_tag_type)
  
  return mb_tag_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDataPacket::set_allocated_mb_tag_type(::std::string* mb_tag_type) {
  if (mb_tag_type != NULL) {
    
  } else {
    
  }
  mb_tag_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_tag_type);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDataPacket.mb_tag_type)
}

// -------------------------------------------------------------------

// MbDatRecvResponse

// optional string mb_error_code = 1;
inline void MbDatRecvResponse::clear_mb_error_code() {
  mb_error_code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDatRecvResponse::mb_error_code() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDatRecvResponse.mb_error_code)
  return mb_error_code_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDatRecvResponse::set_mb_error_code(const ::std::string& value) {
  
  mb_error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDatRecvResponse.mb_error_code)
}
inline void MbDatRecvResponse::set_mb_error_code(const char* value) {
  
  mb_error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDatRecvResponse.mb_error_code)
}
inline void MbDatRecvResponse::set_mb_error_code(const char* value, size_t size) {
  
  mb_error_code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDatRecvResponse.mb_error_code)
}
inline ::std::string* MbDatRecvResponse::mutable_mb_error_code() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDatRecvResponse.mb_error_code)
  return mb_error_code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDatRecvResponse::release_mb_error_code() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDatRecvResponse.mb_error_code)
  
  return mb_error_code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDatRecvResponse::set_allocated_mb_error_code(::std::string* mb_error_code) {
  if (mb_error_code != NULL) {
    
  } else {
    
  }
  mb_error_code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_error_code);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDatRecvResponse.mb_error_code)
}

// optional string mb_batch_id = 2;
inline void MbDatRecvResponse::clear_mb_batch_id() {
  mb_batch_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MbDatRecvResponse::mb_batch_id() const {
  // @@protoc_insertion_point(field_get:TSDStreaming.MbDatRecvResponse.mb_batch_id)
  return mb_batch_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDatRecvResponse::set_mb_batch_id(const ::std::string& value) {
  
  mb_batch_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TSDStreaming.MbDatRecvResponse.mb_batch_id)
}
inline void MbDatRecvResponse::set_mb_batch_id(const char* value) {
  
  mb_batch_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TSDStreaming.MbDatRecvResponse.mb_batch_id)
}
inline void MbDatRecvResponse::set_mb_batch_id(const char* value, size_t size) {
  
  mb_batch_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TSDStreaming.MbDatRecvResponse.mb_batch_id)
}
inline ::std::string* MbDatRecvResponse::mutable_mb_batch_id() {
  
  // @@protoc_insertion_point(field_mutable:TSDStreaming.MbDatRecvResponse.mb_batch_id)
  return mb_batch_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MbDatRecvResponse::release_mb_batch_id() {
  // @@protoc_insertion_point(field_release:TSDStreaming.MbDatRecvResponse.mb_batch_id)
  
  return mb_batch_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MbDatRecvResponse::set_allocated_mb_batch_id(::std::string* mb_batch_id) {
  if (mb_batch_id != NULL) {
    
  } else {
    
  }
  mb_batch_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mb_batch_id);
  // @@protoc_insertion_point(field_set_allocated:TSDStreaming.MbDatRecvResponse.mb_batch_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TSDStreaming

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SxDataTransfer_2eproto__INCLUDED
